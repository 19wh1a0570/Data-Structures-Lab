i) Creation 
ii) Insertion 
iii) Deletion
 iv) Traversal
#include<stdio.h>
#include<stdlib.h>
struct node
{
	int data;
	struct node*prev;
	struct node*next;
};
struct node*head=NULL,*tail=NULL,*cur,*t1,*t2;
void create()
{
	int n,i;
	printf("enter no.of node:");
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		cur=(struct node*)malloc(sizeof(struct node));
		printf("enter data:");
		scanf("%d",&cur->data);
		cur->prev=NULL;
		cur->next=NULL;
		if(head==NULL)
			head=tail=cur;
		else
		{
			tail->next=cur;
			cur->prev=tail;
			tail=cur;
		}
	}
}


void insert_at_begin()
{
	cur =(struct node*)malloc(sizeof(struct node));
	printf("enter data:");
	scanf("%d",&cur->data);
	cur->prev=NULL;
	cur->next=head;
	head->prev=cur;
	head=cur;
}
void insert_at_end()
{
	cur =(struct node*)malloc(sizeof(struct node));
	printf("enter data:");
	scanf("%d",&cur->data);
	cur->next=NULL;
	cur->prev=tail;
	tail->next=cur;
	tail=cur;
}
void insert_at_pos()
{
	int pos,c=1;
	cur =(struct node*)malloc(sizeof(struct node));
	printf("enter data:");
	scanf("%d",&cur->data);
	printf("enter position:");
	scanf("%d",&pos);
	t1=head;
	while(c<pos && t1!=NULL)
	{
		t2=t1;
		t1=t1->next;
		c++;
	}
	t2->next=cur;
	cur->prev=t2;
	cur->next=t1;
	t1->prev=cur;
}
void delete_at_begin()
{
	cur=head;
	head=cur->next;
	head->prev=NULL;
	cur->next=NULL;
	printf("deleted element %d:",cur->data);
	free(cur);
}
void delete_at_end()
{
	cur=tail;
	tail=cur->prev;
	tail->next=NULL;
	cur->prev=NULL;
	printf("deleted element %d:",cur->data);
	free(cur);
}
void insert_before()
{
	int value;
	cur =(struct node*)malloc(sizeof(struct node));
	printf("enter data:");
	scanf("%d",&cur->data);
	printf("enter value:");
	scanf("%d",&value);
	t1=head;
	while(t1->data!=value && t1!=NULL)
	{
		t2=t1;
		t1=t1->next;
	}
	t2->next=cur;
	cur->prev=t2;
	cur->next=t1;
	t1->prev=cur;
}
void insert_after()
{
	int value;
	cur =(struct node*)malloc(sizeof(struct node));
	printf("enter data:");
	scanf("%d",&cur->data);
	printf("enter value:");
	scanf("%d",&value);
	t1=head;
	while(t1->data!=value && t1!=NULL)
	{
		t1=t1->next;
	}
	cur->next=t1->next;
	t1->next->prev=cur;
	t1->next=cur;
	cur->prev=t1;
}
void delete_at_pos()
{
	int c=1,pos;
	printf("enter the pos of deletion");
	scanf("%d",&pos);
	t1=head;
	while(c<pos && t1!=NULL)
	{
		t2=t1;
		t1=t1->next;
		c++;
	}
	t2->next=t1->next;
	t1->next->prev=t2;
	printf("deleted data is %d:",t1->data);
	free(t1);
}
void delete_after()
{
	int value;
	printf("enter value:");
	scanf("%d",&value);
	t1=head;
	while(t1!=NULL && t1->data!=value)
		t1=t1->next;
	t2=t1->next;
	t1->next=t2->next;
	t2->next->prev=t1;
	printf("deleted element %d",t2->data);
	free(t2);
}
void delete_before()
{
	int value;
	printf("enter value");
	scanf("%d",&value);
	t1=head;
	while(t1->next->data!=value && t1->next!=NULL)
	{
		t2=t1;
		t1=t1->next;
	}
	t2->next=t1->next;
	t1->next->prev=t2;
	printf("deleted data is %d:",t1->data);
	free(t1);
}
void display_forward()
{
	if(head==NULL)
		printf("DLL is empty");
	else
	{
		cur=head;
		while(cur!=NULL)
		{
			printf("%d-><-",cur->data);
			cur=cur->next;
		}
	}
}
void display_reverse()
{
	if(head==NULL)
		printf("DLL is empty");
	else
	{
		cur=tail;
		while(cur!=NULL)
		{
			printf("%d<->",cur->data);
			cur=cur->prev;
		}
	}
}
void sorting()
{
	struct node*p1,*p2;
	int t;
	p1=head;
	int c=0,i;
	while(p1!=NULL)
	{
		c++;
		p1=p1->next;
	}
	for(i=0;i<c;i++)
	{
		p2=head;
		while(p2->next!=NULL)
		{
			if(p2->data>p2->next->data)
			{
				t=p2->data;
				p2->data=p2->next->data;
				p2->next->data=t;
			}
		        p2=p2->next;
		}
		
	}
}
void search_for_element()
{
	int value,flag=0,c=1;
	printf("value to be searched");
	scanf("%d",&value);
	t1=head;
	while(t1!=NULL)
	{
		if(t1->data==value)
		{
			flag=1;
			break;
		}
		t1=t1->next;
		c++;
	}
	if(flag==1)
	{
		printf("element present in list at %d position",c);
	}
	else
		printf("element not present in list");
}
int main()
{
	int ch;
	while(1)
	{
	printf("-------------start-------------\n");
	printf("program for double linked list\n");
	printf("1-create\n2-insert at begin\n3-insert at position\n4-insert at end\n5-insert before");
	printf("\n6-insert after\n7-delete at begin\n8-delete at end\n9-delete at pos\n10-delete before\n");
	printf("11-delete after\n12-display in forward\n13-display in reverse\n14-search\n15-sort\n16-exit\n");
	scanf("%d",&ch);
	switch(ch)
	{
		case 1:create();
			break;
		case 2:insert_at_begin();
			break;
		case 3:insert_at_pos();
			break;
		case 4:insert_at_end();
			break;
		case 5:insert_before();
			break;
		case 6:insert_after();
			break;
		case 7:delete_at_begin();
			break;
		case 8:delete_at_end();
			break;
		case 9:delete_at_pos();
			break;
		case 10:delete_before();
			break;
		case 11:delete_after();
			break;
		case 12:display_forward();
			break;
		case 13:display_reverse();
			break;
		case 14:search_for_element();
			break;
		case 15:sorting();
			break;
		case 16:exit(0);
	}
	}
}
C:\TDM-GCC-64\dslab>gcc void_double.c -o double

C:\TDM-GCC-64\dslab>double

	
1
enter no.of node:4
enter data:10
enter data:20
enter data:30
enter data:40
2
enter data:50
50-><-10-><-20-><-30-><-40-><-
3
enter data:60
enter position:3
12
50-><-10-><-60-><-20-><-30-><-40-><-
4
enter data:70
12
50-><-10-><-60-><-20-><-30-><-40-><-70-><-
5
enter data:80
enter value:10
12
50-><-80-><-10-><-60-><-20-><-30-><-40-><-70-><-
6
enter data:90
enter value:30
12
50-><-80-><-10-><-60-><-20-><-30-><-90-><-40-><-70-><-
7
deleted element 50
8
deleted element 70
9
enter the pos of deletion3
deleted data is 60
10
enter value10
deleted data is 80
1
enter no.of node:4
enter data:10
enter data:20
enter data:30
11
enter value:20
deleted element 30
enter data:40
12
10-><-20-><-40-><-
13
40<->20<->10<->-
14
value to be searched20
element present in list at 2 position
1
enter no.of node:4
enter data:12
enter data:13
enter data:15
15
12
12-><-13-><-14-><-15-><-
enter data:14
