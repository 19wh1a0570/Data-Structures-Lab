i) Creation 
#include<stdio.h>
#include<stdlib.h>
struct node
{
	int data;
	struct node*link;
};
struct node*head=NULL,*tail=NULL,*cur,*prev,*next;
void sorting()
{
	struct node*p1,*p2;
	int t;
	p1=head;
	int c=0,i;
	while(p1!=NULL)
	{
		c++;
		p1=p1->link;
	}
	for(i=0;i<c;i++)
	{
		p2=head;
		while(p2->link!=NULL)
		{
			if(p2->data>p2->link->data)
			{
				t=p2->data;
				p2->data=p2->link->data;
				p2->link->data=t;
			}
		        p2=p2->link;
		}
		
	}
}

void search_for_element()
{
	int value,flag=0,c=0;
	printf("value to be searched");
	scanf("%d",&value);
	next=head;
	while(next!=NULL)
	{
		if(next->data==value)
		{
			flag=1;
			break;
		}
		next=next->link;
		c++;
	}
	if(flag==1)
	{
		printf("element present in list at %d position",c);
	}
	else
		printf("element not present in list");
}

void reverse()
{
	int a[100];
	int i=0;
	cur=head;
	while(cur!=NULL)
	{
		a[i++]=cur->data;
		cur=cur->link;
	}
	while(i-1 >=0)
	{
		printf("%d->",a[i]);
		i--;
	}
}

void insert_before()
{
	int value;
	cur=(struct node*)malloc(sizeof(struct node));
	scanf("%d",&cur->data);
	scanf("%d",&value);
	next=head;
	while(next->data!=value && next!=NULL)
	{	prev=next;
		next=next->link;
	}
	prev->link=cur;
	cur->link=next;
}

void insert_at_position()
{
	int pos,c=1;
	cur=(struct node*)malloc(sizeof(struct node));
	scanf("%d",&cur->data);
	scanf("%d",&pos);
	next=head;
	while(c<pos)
	{	prev=next;
		next=next->link;
		c++;
	}
	prev->link=cur;
	cur->link=next;
}

void insert_at_end()
{
	cur=(struct node*)malloc(sizeof(struct node));
	scanf("%d",&cur->data);
	cur->link=NULL;
	tail->link=cur;
	tail=cur;
}

void insert_at_begin()
{
	cur=(struct node*)malloc(sizeof(struct node));
	scanf("%d",&cur->data);
	cur->link=head;
	head=cur;
}

void insert_after()
{
	int value;
	cur=(struct node*)malloc(sizeof(struct node));
	scanf("%d",&cur->data);
	scanf("%d",&value);
	next=head;
	while(next->data!=value && next!=NULL)
	{
		next=next->link;
	}
	cur->link=next->link;
	next->link=cur;
}

void display()
{
	if(head==NULL)
		printf("list is empty");
	else
	{
		next=head;
		while(next!=NULL)
		{
			printf("%d->",next->data);
			next=next->link;
		}
	}
}

void delete_before()
{
	int value;
	scanf("%d",&value);
	next=head;
	while(next->link->data!=value)
	{
		prev=next;
		next=next->link;
		
	}
	prev->link=next->link;
	next->link=NULL;
	printf("deleted element is %d\n",next->data);
	free(next);
}

void delete_at_pos()
{
	int pos,c=1;
	scanf("%d",&pos);
	next=head;
	while(c<pos)
	{
		prev=next;
		next=next->link;
		c++;
		
	}
	prev->link=next->link;
	printf("deleted elementm is %d\n",next->data);
	next->link=NULL;
	free(next);
}

void delete_at_end()
{
	cur=head;
	while(cur->link!=tail)
	{
		cur=cur->link;
		cur->link=NULL;
		next=tail;
	}
	printf("deleted elementm is %d\n",next->data);
	free(next);
	tail=cur;
}

void delete_at_begin()
{
	cur=head;
	head=cur->link;
	cur->link=NULL;
	printf("deleted elementm is %d\n",cur->data);
	free(cur);
}
void delete_after()
{
	int value;
	scanf("%d",&value);
	next=head;
	while(next->data!=value)
	{
		prev=next;
		next=next->link;
		
	}
	prev=next->link;
	next->link=prev->link;
	printf("deleted element is %d\n",prev->data);
	prev->link=NULL;
	free(prev);
}

void create()
{
	int i,n;
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		cur=(struct node*)malloc(sizeof(struct node));
		printf("current node data:");
		scanf("%d",&(cur->data));
		cur->link=NULL;
		if(head==NULL)
			head=tail=cur;
		else
		{
			tail->link=cur;
			tail=cur;
		}
	}
}

int main()
{
	int ch;
	while(1)
	{
	printf("program for single linked list\n");
	printf("1-create\n2-insert at begin\n3-insert at position\n4-insert at end\n5-insert before");
	printf("\n6-insert after\n7-delete at begin\n8-delete at end\n9-delete at pos\n10-delete before\n");
	printf("11-delete after\n12-traversal\n13-display in reverse\n14-search\n15-sort\n");
	scanf("%d",&ch);
	switch(ch)
	{
		case 1:create();
			break;
		case 2:insert_at_begin();
			break;
		case 3:insert_at_position();
			break;
		case 4:insert_at_end();
			break;
		case 5:insert_before();
			break;
		case 6:insert_after();
			break;
		case 7:delete_at_begin();
			break;
		case 8:delete_at_end();
			break;
		case 9:delete_at_pos();
			break;
		case 10:delete_before();
			break;
		case 11:delete_after();
			break;
		case 12:display();
			break;
		case 13:reverse();
			break;
		case 14:search_for_element();
			break;
		case 15:sorting();
			break;
		case 16:exit(0);
	}
	}
}
C:\TDM-GCC-64\dslab>gcc linked_list.c -o linked

C:\TDM-GCC-64\dslab>linked
------------------start-------------------program for single linked list
1-create
2-insert at begin
3-insert at position
4-insert at end
5-insert before
6-insert after
7-delete at begin
8-delete at end
9-delete at pos
10-delete before
11-delete after
12-traversal
13-display in reverse
14-search
15-sort

1
enter no.of nodes:4
current node data:10
current node data:20
current node data:30
current node data:40
ii)Insertion
2
enter data:50
50->10->20->30->40->
3
enter data:60
enter pos:3
10->20->60->30->40->
4
enter data:70
10->20->30->40->70->
5
enter data:80
20
10->80->20->30->40->
6
enter data:90
30
10->20->30->90->40->

iii) Deletion
7
deleted element is 10
20->30->40->
8
deleted element is 40
10->20->30->
 9
enter pos:2
deleted element is 20
10->30->40->
10
enter value:20
deleted element is 10
20->30->40->
11
enter value:30
deleted element is 40
10->20->30->


iv)Transversal
 12
10->20->30->40->-
Reverse-
13
40->30->20->10->
Search-
14
value to be searched:20
element present in list at 1 position
Sort-
1
enter no.of nodes:4
current node data:30
current node data:20
current node data:10
current node data:40
15
12
10->20->30->40->






